# Date: 2024-8-26
# Author: Generated by GoCodeo.

import unittest 

from board.admin import UserAdmin 

from dj.models import User 

class TestUserAdmin(unittest.TestCase):

    def test_user_admin_list_view(self):
        admin_site = admin.AdminSite()
        user_admin = UserAdmin(User, admin_site)
        expected_fields = ['username', 'email', 'date_joined']
        self.assertEqual(user_admin.list_display, expected_fields)
 


    def test_filter_date_joined(self):
        # Create some test users
        user1 = User.objects.create(username='user1', email='user1@example.com', date_joined='2021-01-01')
        user2 = User.objects.create(username='user2', email='user2@example.com', date_joined='2021-02-01')
        user3 = User.objects.create(username='user3', email='user3@example.com', date_joined='2021-03-01')
        # Filter users by date joined
        filtered_users = UserAdmin.list_filter[0].queryset(None, User.objects.all(), None)
        # Check if the filtered users match the expected result
        self.assertEqual(list(filtered_users), [user1, user2, user3]) 


    def test_search_functionality(self):
        # Create some test users
        User.objects.create(username='user1', email='user1@example.com')
        User.objects.create(username='user2', email='user2@example.com')
        User.objects.create(username='user3', email='user3@example.com')
        # Search for a user by username
        result1 = UserAdmin.search_fields[0].search('user1')
        self.assertEqual(result1.count(), 1)
        self.assertEqual(result1[0].username, 'user1')
        # Search for a user by email
        result2 = UserAdmin.search_fields[1].search('user2@example.com')
        self.assertEqual(result2.count(), 1)
        self.assertEqual(result2[0].email, 'user2@example.com') 


    def test_list_display(self):
        admin = UserAdmin(User, None)
        self.assertEqual(admin.list_display, ('username', 'email', 'date_joined')) 


    def test_empty_date_joined(self):
        user = User(username='testuser', email='test@example.com', date_joined='')
        self.assertEqual(user.date_joined, '') 


    def test_non_existent_username(self):
        # Create a user with a non-existent username
        user = User(username='nonexistent', email='nonexistent@example.com')
        user.save()

        # Create an instance of UserAdmin
        user_admin = UserAdmin(User, admin.site)

        # Get the list of users displayed in the list view
        users = user_admin.get_queryset(None)

        # Check if the user with non-existent username is not in the list
        self.assertNotIn(user, users) 


    def test_non_existent_email(self):
        # Create a non-existent email
        email = 'nonexistent@example.com'
        # Create a UserAdmin instance
        user_admin = UserAdmin(User, admin.site)
        # Call the get_search_results method with the non-existent email
        search_results = user_admin.get_search_results(request=None, queryset=User.objects.all(), search_term=email)
        # Assert that the search results are empty
        self.assertEqual(len(search_results), 0) 


